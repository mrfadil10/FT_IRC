// int										_clientSocket;
	// struct sockaddr_in						clientaddr;
	// socklen_t								len = sizeof(clientaddr);
	// pollfd Pollfd;

	// Pollfd.fd = _sock;
	// Pollfd.events = POLLHUP|POLLIN;
	// Pollfd.revents = 0;

	// _pollfds.push_back(Pollfd);
	// while (true)
	// {
	// 	if (poll(_pollfds.data(), _pollfds.size(), -1) == -1)
	// 		throw "Error polling";
	// 	for (size_t i = 0; i < _pollfds.size(); i++) // EAGAIN is an erno 
	// 	{
	// 		if ((_pollfds[i].revents & POLLHUP) == POLLHUP)
	// 		{
	// 			std::cout << "Client " << _pollfds[i].fd - 3 << " disconnected" << std::endl;
	// 			get_client_by_id(_pollfds[i].fd).close_connection();
	// 			_pollfds.erase(_pollfds.begin() + i);
	// 			_clients.erase(_clients.begin() + i - 1);
	// 			break ;
	// 		}
	// 		if ((_pollfds[i].revents & POLLIN) == POLLIN)
	// 		{
	// 			if (i == 0)
	// 			{
	// 				_clientSocket = accept(_sock, reinterpret_cast<struct sockaddr*>(&clientaddr), &len);
	// 				if (_clientSocket == -1)
	// 					continue ;
	// 				else
	// 				{
	// 					char* ip_address = inet_ntoa(clientaddr.sin_addr);

	// 					if (fcntl(_clientSocket, F_SETFL, O_NONBLOCK) == -1)
	// 					{
	// 						perror("fcntl");
	// 						exit (1);
	// 					}
	// 					std::cout << "Client " << _clientSocket - 3 << " is connected" << std::endl;
	// 					// std::cout << "New Connection Has Been Accepted, Client Socket: "<< _clientSocket - 3 << std::endl;
	// 					Pollfd.fd = _clientSocket;
	// 					_pollfds.push_back(Pollfd);


	// 					Client	a(_clientSocket, ip_address);
	// 					_clients.push_back(a);
	// 				}
	// 			}
	// 			else
	// 			{
	// 				Client&		 cl = get_client_by_id(_pollfds[i].fd);
	// 				std::string cl_line = cl.getMsg();
				

	// 				std::string	line = recving(_pollfds[i].fd);

	// 				cl_line.append(line.c_str());
	// 				cl.setMsg(cl_line);

	// 				while (std::strstr(cl_line.c_str(), "\r\n"))
	// 				{

	// 					std::string kaka = cl_line;

	// 					del_break(kaka);
	// 					std::cout << kaka << " << cmd\n";
	// 					parseCmd(kaka, cl);

	// 					del_break(cl_line);

	// 					cl.setMsg(cl_line);
	// 				}
	// 			}
	// 		}
	// 	}
	// }